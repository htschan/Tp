#!/usr/bin/env groovy

node {
    stage('scmstage'){
        git changelog: false, poll: false, url: '${THE_REPO}'    
        
    }
    stage('prime'){
        def status1 = powershell(returnStatus: true, script: 'Copy-Item $env:PROJECT_CONFIG/timepuncher-client-config-timepuncher.ch.ts $env:WORKSPACE/TpMaterial/src/app/timepuncher-client-config.ts')
		if ( status1 == 0){
			echo 'Copy config TpMaterial file ok'
		}
		else {
			echo 'Copy config file TpMaterial failed'
		}
        def status1 = powershell(returnStatus: true, script: 'Copy-Item $env:PROJECT_CONFIG/timepuncher-client-config-timepuncher.ch.ts $env:WORKSPACE/TpIonic/src/timepuncher-client-config.ts')
		if ( status1 == 0){
			echo 'Copy config TpIonic file ok'
		}
		else {
			echo 'Copy config TpIoinic file failed'
		}
    }
    stage('install'){
        dir('TpMaterial') {
            bat 'npm install'
        }
        dir('TpDotNetCore') {
            bat 'dotnet restore'
        }
        dir('TpIonic') {
            bat 'npm install'
        }
    }
    stage('build'){
        dir('TpMaterial'){
            bat 'ng build --prod'
        }
        dir('TpIonic'){
            bat 'ionic build --prod'
        }
        dir('TpDotNetCore'){
            bat 'dotnet build --configuration "Release"'
        }
    }
	stage('deploy'){
        def status1 = powershell(returnStatus: true, script: 'Stop-WebAppPool -Name "TpDotNetCore"')
		if ( status1 == 0){
			echo 'TpDotNetCore AppPool stopped'
		}
		else {
			echo 'Failed to stop TpDotNetCore AppPool'
		}
		dir('TpDotNetCore'){
			bat 'dot net publish --configuration "Release" --output ${BACKEND_SITE_LOCATION}'
		}
        def status2 = powershell(returnStatus: true, script: 'Start-WebAppPool -Name "TpDotNetCore"')
		if ( status2 == 0){
			echo 'TpDotNetCore AppPool started'
		}
		else {
			echo 'Failed to start TpDotNetCore AppPool'
		}
		dir(${IONIC_SITE_LOCATION}){
			def status3 = powershell(returnStatus: true, script: 'Remove-Item * -include *.js *css')
			if ( status3 == 0){
				echo 'TpIonic site location cleanup done'
			}
			else {
				echo 'Failed to cleanup TpIonic site location'
			}
		}
		dir('TpIonic'){
			bat '(robocopy www %IONIC_SITE_LOCATION% /e /r:1 /unicode) ^& IF %ERRORLEVEL% LEQ 1 exit 0'
		}
		dir('TpIonic'){
			def status4 = powershell(returnStatus: true, script: 'Copy-Item web.config $env:IONIC_SITE_LOCATION/web.config')
			if ( status4 == 0){
				echo 'Copy web.config TpIonic file ok'
			}
			else {
				echo 'Copy web.config file TpIonic failed'
			}
		}


		dir(${MATERIAL_SITE_LOCATION}){
			def status3 = powershell(returnStatus: true, script: 'Remove-Item * -include *.bundle.js *.bundle.css')
			if ( status3 == 0){
				echo 'TpMaterial site location cleanup done'
			}
			else {
				echo 'Failed to cleanup TpMaterial site location'
			}
		}
		dir('TpMaterial'){
			bat '(robocopy dist *.* %MATERIAL_SITE_LOCATION% /e /r:1 /unicode) ^& IF %ERRORLEVEL% LEQ 1 exit 0'
		}
		dir('TpMaterial'){
			def status4 = powershell(returnStatus: true, script: 'Copy-Item web.config $env:MATERIAL_SITE_LOCATION/web.config')
			if ( status4 == 0){
				echo 'Copy web.config TpMaterial file ok'
			}
			else {
				echo 'Copy web.config file TpMaterial failed'
			}
		}
	}
}
