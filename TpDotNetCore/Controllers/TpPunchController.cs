//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.13.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using TpDotNetCore.Helpers;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using System.ComponentModel;
using NSwag.Annotations;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace TpDotNetCore.Controllers
{
#pragma warning disable // Disable all warnings

    public interface ITpPunchController
    {
        /// <summary>Retrieves all punches of current user</summary>
        /// <returns>An array of products</returns>
        Task<SwaggerResponse<System.Collections.ObjectModel.ObservableCollection<PunchDto>>> GetPunchesAsync();

        /// <summary>Retrieves all punches of current user of selected day</summary>
        /// <param name="day">The day selector [1 .. 31]</param>
        /// <param name="month">The month number selector [1 .. 12]</param>
        /// <param name="year">The year number selector [2015 .. 2099]</param>
        /// <returns>An day punches object</returns>
        Task<SwaggerResponse<DayResponse>> GetDayAsync(double? day, double? month, double? year);

        /// <summary>Retrieves all punches of current user selected week</summary>
        /// <param name="week">The week number selector</param>
        /// <param name="year">The year number selector [2015 .. 2099]</param>
        /// <returns>A week punches object</returns>
        Task<SwaggerResponse<WeekResponse>> GetWeekAsync(double? week, double? year);

        /// <summary>Retrieves all punches of current user of selected month</summary>
        /// <param name="month">The month number selector [1 .. 12]</param>
        /// <param name="year">The year number selector [2015 .. 2099]</param>
        /// <returns>A month punches object</returns>
        Task<SwaggerResponse<MonthResponse>> GetMonthAsync(double? month, double? year);

        /// <summary>Retrieves all punches of current user of selected year</summary>
        /// <param name="year">The year number selector [2015 .. 2099]</param>
        /// <returns>A year punches object</returns>
        Task<SwaggerResponse<YearResponse>> GetYearAsync(double? year);

        /// <summary>Erzeugt einen Zeitstempel</summary>
        /// <returns>Liefert die Tagesstempel zurück</returns>
        Task<SwaggerResponse<DayResponse>> PunchInAsync();

        /// <summary>Erzeugt einen Zeitstempel</summary>
        /// <returns>Liefert die Tagesstempel zurück</returns>
        Task<SwaggerResponse<DayResponse>> PunchOutAsync();

        /// <summary>Modifiziert einen Zeitstempel</summary>
        /// <returns>Punch modified</returns>
        Task<SwaggerResponse> PunchModifyAsync(ModifyPunchDto modifyPunchDto);

        /// <summary>Löscht einen Zeitstempel</summary>
        /// <returns>Punch deleted</returns>
        Task<SwaggerResponse> PunchDeleteAsync(DeletePunchDto deletePunchDto);

    }

    [Route("api/v1/punch")]
    [Authorize]
    public partial class TpPunchController : TpBaseController
    {
        private ITpPunchController _implementation;

        public TpPunchController(ITpPunchController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>Retrieves all punches of current user</summary>
        /// <returns>An array of products</returns>
        [HttpGet, Route("getPunches")]
        [SwaggerResponse("200", typeof(PunchDto[]))]
        public async Task<IActionResult> GetPunches()
        {
            var result = await _implementation.GetPunchesAsync().ConfigureAwait(false);

            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }

        /// <summary>Retrieves all punches of current user of selected day</summary>
        /// <param name="day">The day selector [1 .. 31]</param>
        /// <param name="month">The month number selector [1 .. 12]</param>
        /// <param name="year">The year number selector [2015 .. 2099]</param>
        /// <returns>An day punches object</returns>
        [HttpGet, Route("getDayPunches")]
        [SwaggerResponse("200", typeof(DayResponse))]
        public async Task<IActionResult> GetDay(double? day, double? month, double? year)
        {
            var result = await _implementation.GetDayAsync(day, month, year).ConfigureAwait(false);

            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }

        /// <summary>Retrieves all punches of current user selected week</summary>
        /// <param name="week">The week number selector</param>
        /// <param name="year">The year number selector [2015 .. 2099]</param>
        /// <returns>A week punches object</returns>
        [HttpGet, Route("getWeekPunches")]
        [SwaggerResponse("200", typeof(WeekResponse))]
        public async Task<IActionResult> GetWeek(double? week, double? year)
        {
            var result = await _implementation.GetWeekAsync(week, year).ConfigureAwait(false);

            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }

        /// <summary>Retrieves all punches of current user of selected month</summary>
        /// <param name="month">The month number selector [1 .. 12]</param>
        /// <param name="year">The year number selector [2015 .. 2099]</param>
        /// <returns>A month punches object</returns>
        [HttpGet, Route("getMonthPunches")]
        [SwaggerResponse("200", typeof(MonthResponse))]
        public async Task<IActionResult> GetMonth(double? month, double? year)
        {
            var result = await _implementation.GetMonthAsync(month, year).ConfigureAwait(false);

            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }

        /// <summary>Retrieves all punches of current user of selected year</summary>
        /// <param name="year">The year number selector [2015 .. 2099]</param>
        /// <returns>A year punches object</returns>
        [HttpGet, Route("getYearPunches")]
        [SwaggerResponse("200", typeof(YearResponse))]
        public async Task<IActionResult> GetYear(double? year)
        {
            var result = await _implementation.GetYearAsync(year).ConfigureAwait(false);

            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }

        /// <summary>Erzeugt einen Zeitstempel</summary>
        /// <returns>Liefert die Tagesstempel zurück</returns>
        [HttpPost, Route("punchIn")]
        [SwaggerResponse("200", typeof(DayResponse))]
        public async Task<IActionResult> PunchIn()
        {
            if (!ModelState.IsValid) return HandleInvalidModelState(ModelState);
            var result = await _implementation.PunchInAsync().ConfigureAwait(false);

            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }

        /// <summary>Erzeugt einen Zeitstempel</summary>
        /// <returns>Liefert die Tagesstempel zurück</returns>
        [HttpPost, Route("punchOut")]
        [SwaggerResponse("200", typeof(DayResponse))]
        public async Task<IActionResult> PunchOut()
        {
            if (!ModelState.IsValid) return HandleInvalidModelState(ModelState);
            var result = await _implementation.PunchOutAsync().ConfigureAwait(false);

            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }

        /// <summary>Modifiziert einen Zeitstempel</summary>
        /// <returns>Punch modified</returns>
        [HttpPost, Route("punchModify")]
        [SwaggerResponse("200", typeof(void))]
        public async Task<IActionResult> PunchModify([FromBody] ModifyPunchDto modifyPunchDto)
        {
            if (!ModelState.IsValid) return HandleInvalidModelState(ModelState);
            var result = await _implementation.PunchModifyAsync(modifyPunchDto).ConfigureAwait(false);

            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok();
            else
                return new ObjectResult(result.StatusCode) { StatusCode = result.StatusCode };
        }

        /// <summary>Löscht einen Zeitstempel</summary>
        /// <returns>Punch deleted</returns>
        [HttpDelete, Route("punchDelete")]
        [SwaggerResponse("200", typeof(void))]
        public async Task<IActionResult> PunchDelete([FromBody] DeletePunchDto deletePunchDto)
        {
            var result = await _implementation.PunchDeleteAsync(deletePunchDto).ConfigureAwait(false);

            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok();
            else
                return new ObjectResult(result.StatusCode) { StatusCode = result.StatusCode };
        }
    }
}