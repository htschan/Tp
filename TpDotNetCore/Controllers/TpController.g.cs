//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.3.0 (NJsonSchema v9.4.2.0) (http://NSwag.org)
// </auto-generated>
//----------------------

using System.Linq;
using Microsoft.AspNetCore.Mvc;
using TpDotNetCore.Helpers;
using Microsoft.AspNetCore.Authorization;

namespace TpDotNetCore.Controllers
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.3.0")]
    public interface ITpController
    {
        /// <summary>Sendet eine Authentifizierungsanfrage an den Server [AllowAnonymous]</summary>
        /// <param name="credentials">Eine ASCII-Zeichenfolge mit mindestens einem Zeichen.</param>
        /// <returns>AuthResponse</returns>
        System.Threading.Tasks.Task<SwaggerResponse<AuthResponse>> AuthenticateAsync(CredentialDto credentials);
        /// <summary>Einen Benutzer registrieren [AllowAnonymous]</summary>
        /// <param name="registerDto">Registrierungsinformationen</param>
        /// <returns>Die Operation war erfolgreich. Der Benutzer erhält eine E-Mail mit einem Bestätigungslink.</returns>
        System.Threading.Tasks.Task<SwaggerResponse<RegisterResponse>> RegisterUserAsync(RegisterDto registerDto);
        /// <summary>Eine Benutzerregistrierung bestätigen [AllowAnonymous]</summary>
        /// <param name="id">Userid</param>
        /// <param name="cnf">Confirmationtoken</param>
        /// <returns>Die Operation war erfolgreich.</returns>
        System.Threading.Tasks.Task<SwaggerResponse<ConfirmResponse>> ConfirmRegisterAsync(string id, string cnf);
        /// <summary>Passwort wiederherstellen [AllowAnonymous]</summary>
        /// <param name="recoverPasswordParams">Wiederherstellungsparameter</param>
        /// <returns>Die Operation war erfolgreich. Der Benutzer erhält eine E-Mail mit einem Passwortresetcode.</returns>
        System.Threading.Tasks.Task<SwaggerResponse<RecoverPasswordResponse>> RecoverPasswordAsync(RecoverPasswordParams recoverPasswordParams);
        /// <summary>Abfrage des Usernamens [AllowAnonymous]</summary>
        /// <param name="recoverUsernameParams">Wiederherstellungsparameter</param>
        /// <returns>Die Operation war erfolgreich. Der Benutzer erhält eine E-Mail mit seinem Benutzernamen.</returns>
        System.Threading.Tasks.Task<SwaggerResponse<RecoverUsernameResponse>> RecoverUsernameAsync(RecoverUsernameParams recoverUsernameParams);
        /// <summary>Ein Benutzer setzt ein neues Passwort [AllowAnonymous]</summary>
        /// <param name="setPasswordParams">Wiederherstellungsparameter</param>
        /// <returns>Die Operation war erfolgreich.</returns>
        System.Threading.Tasks.Task<SwaggerResponse<SetPasswordResponse>> SetPasswordAsync(SetPasswordParams setPasswordParams);
        /// <summary>Abfrage aller Profile</summary>
        /// <returns>Die Operation war erfolgreich.</returns>
        System.Threading.Tasks.Task<SwaggerResponse<GetProfilesResponse>> GetProfilesAsync();
        /// <summary>Abfrage des eigenen Profils</summary>
        /// <returns>Die Operation war erfolgreich.</returns>
        System.Threading.Tasks.Task<SwaggerResponse<GetProfileResponse>> GetMyProfileAsync();
        /// <summary>Abfrage eines Benutzerprofiles</summary>
        /// <param name="userid">User Id</param>
        /// <returns>Die Operation war erfolgreich.</returns>
        System.Threading.Tasks.Task<SwaggerResponse<GetProfileResponse>> GetProfileAsync(string userid);
        /// <summary>Retrieves all punches of current user</summary>
        /// <returns>An array of products</returns>
        System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.List<PunchDto>>> GetPunchesAsync();
        /// <summary>Retrieves all punches of current user of today</summary>
        /// <returns>An day punches object</returns>
        System.Threading.Tasks.Task<SwaggerResponse<DayResponse>> GetTodayAsync();
        /// <summary>Retrieves all punches of current user current week</summary>
        /// <returns>A week punches object</returns>
        System.Threading.Tasks.Task<SwaggerResponse<WeekResponse>> GetThisWeekAsync();
        /// <summary>Retrieves all punches of current user of current month</summary>
        /// <returns>A month punches object</returns>
        System.Threading.Tasks.Task<SwaggerResponse<MonthResponse>> GetThisMonthAsync();
        /// <summary>Retrieves all punches of current user of current year</summary>
        /// <returns>A year punches object</returns>
        System.Threading.Tasks.Task<SwaggerResponse<YearResponse>> GetThisYearAsync();
        /// <summary>Erzeugt einen Zeitstempel</summary>
        /// <returns>Liefert die Tagesstempel zurück</returns>
        System.Threading.Tasks.Task<SwaggerResponse<DayResponse>> PunchInAsync();
        /// <summary>Erzeugt einen Zeitstempel</summary>
        /// <returns>Liefert die Tagesstempel zurück</returns>
        System.Threading.Tasks.Task<SwaggerResponse<DayResponse>> PunchOutAsync();
        /// <summary>Modifiziert einen Zeitstempel</summary>
        /// <returns>Unexpected error</returns>
        System.Threading.Tasks.Task<SwaggerResponse<PunchResponse>> PunchModifyAsync(ModifyPunchVm modifyPunchViewModel);
        /// <summary>Modifiziert einen Zeitstempel</summary>
        /// <returns>Unexpected error</returns>
        System.Threading.Tasks.Task<SwaggerResponse<PunchResponse>> PunchModifyAdminAsync(ModifyPunchAdminParams modifyPunchAdminParams);
        /// <summary>Setzt den Status der Monatsabrechung</summary>
        /// <returns>Unexpected error</returns>
        System.Threading.Tasks.Task<SwaggerResponse<PunchResponse>> PunchSetStatusAdminAsync(SetStatusAdminParams setStatusAdminParams);
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.3.0")]
    [Route("api/v1")]
    public partial class TpController : Microsoft.AspNetCore.Mvc.Controller 
    {
        private ITpController _implementation; 
    
        public TpController(ITpController implementation)
        {
            _implementation = implementation; 
        }
    
        /// <summary>Sendet eine Authentifizierungsanfrage an den Server [AllowAnonymous]</summary>
        /// <param name="credentials">Eine ASCII-Zeichenfolge mit mindestens einem Zeichen.</param>
        /// <returns>AuthResponse</returns>
        [AllowAnonymous]    
        [HttpPost, Route("authenticate")]
        public async System.Threading.Tasks.Task<IActionResult> Authenticate([FromBody]CredentialDto credentials)
        {    
            if(!ModelState.IsValid) return BadRequest(ModelState);
            var result = await _implementation.AuthenticateAsync(credentials);
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Einen Benutzer registrieren [AllowAnonymous]</summary>
        /// <param name="registerDto">Registrierungsinformationen</param>
        /// <returns>Die Operation war erfolgreich. Der Benutzer erhält eine E-Mail mit einem Bestätigungslink.</returns>
        [AllowAnonymous]    
        [HttpPost, Route("register")]
        public async System.Threading.Tasks.Task<IActionResult> RegisterUser([FromBody]RegisterDto registerDto)
        {    
            if(!ModelState.IsValid) return BadRequest(ModelState);
            var result = await _implementation.RegisterUserAsync(registerDto);
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Eine Benutzerregistrierung bestätigen [AllowAnonymous]</summary>
        /// <param name="id">Userid</param>
        /// <param name="cnf">Confirmationtoken</param>
        /// <returns>Die Operation war erfolgreich.</returns>
        [AllowAnonymous]    
        [HttpGet, Route("confirm")]
        public async System.Threading.Tasks.Task<IActionResult> ConfirmRegister([FromQuery]string id, [FromQuery]string cnf)
        {    
            var result = await _implementation.ConfirmRegisterAsync(id, cnf);
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Passwort wiederherstellen [AllowAnonymous]</summary>
        /// <param name="recoverPasswordParams">Wiederherstellungsparameter</param>
        /// <returns>Die Operation war erfolgreich. Der Benutzer erhält eine E-Mail mit einem Passwortresetcode.</returns>
        [AllowAnonymous]    
        [HttpPost, Route("recoverPassword")]
        public async System.Threading.Tasks.Task<IActionResult> RecoverPassword([FromBody]RecoverPasswordParams recoverPasswordParams)
        {    
            if(!ModelState.IsValid) return BadRequest(ModelState);
            var result = await _implementation.RecoverPasswordAsync(recoverPasswordParams);
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Abfrage des Usernamens [AllowAnonymous]</summary>
        /// <param name="recoverUsernameParams">Wiederherstellungsparameter</param>
        /// <returns>Die Operation war erfolgreich. Der Benutzer erhält eine E-Mail mit seinem Benutzernamen.</returns>
        [AllowAnonymous]    
        [HttpPost, Route("recoverUsername")]
        public async System.Threading.Tasks.Task<IActionResult> RecoverUsername([FromBody]RecoverUsernameParams recoverUsernameParams)
        {    
            if(!ModelState.IsValid) return BadRequest(ModelState);
            var result = await _implementation.RecoverUsernameAsync(recoverUsernameParams);
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Ein Benutzer setzt ein neues Passwort [AllowAnonymous]</summary>
        /// <param name="setPasswordParams">Wiederherstellungsparameter</param>
        /// <returns>Die Operation war erfolgreich.</returns>
        [AllowAnonymous]    
        [HttpPost, Route("setPassword")]
        public async System.Threading.Tasks.Task<IActionResult> SetPassword([FromBody]SetPasswordParams setPasswordParams)
        {    
            if(!ModelState.IsValid) return BadRequest(ModelState);
            var result = await _implementation.SetPasswordAsync(setPasswordParams);
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Abfrage aller Profile</summary>
        /// <returns>Die Operation war erfolgreich.</returns>
        
        [HttpGet, Route("profiles")]
        public async System.Threading.Tasks.Task<IActionResult> GetProfiles()
        {    
            var result = await _implementation.GetProfilesAsync();
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Abfrage des eigenen Profils</summary>
        /// <returns>Die Operation war erfolgreich.</returns>
        
        [HttpGet, Route("profiles/myprofile")]
        public async System.Threading.Tasks.Task<IActionResult> GetMyProfile()
        {    
            var result = await _implementation.GetMyProfileAsync();
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Abfrage eines Benutzerprofiles</summary>
        /// <param name="userid">User Id</param>
        /// <returns>Die Operation war erfolgreich.</returns>
        
        [HttpGet, Route("profiles/{userid}")]
        public async System.Threading.Tasks.Task<IActionResult> GetProfile([FromRoute]string userid)
        {    
            var result = await _implementation.GetProfileAsync(userid);
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Retrieves all punches of current user</summary>
        /// <returns>An array of products</returns>
        
        [HttpGet, Route("punches")]
        public async System.Threading.Tasks.Task<IActionResult> GetPunches()
        {    
            var result = await _implementation.GetPunchesAsync();
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Retrieves all punches of current user of today</summary>
        /// <returns>An day punches object</returns>
        
        [HttpGet, Route("punches/today")]
        public async System.Threading.Tasks.Task<IActionResult> GetToday()
        {    
            var result = await _implementation.GetTodayAsync();
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Retrieves all punches of current user current week</summary>
        /// <returns>A week punches object</returns>
        
        [HttpGet, Route("punches/thisweek")]
        public async System.Threading.Tasks.Task<IActionResult> GetThisWeek()
        {    
            var result = await _implementation.GetThisWeekAsync();
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Retrieves all punches of current user of current month</summary>
        /// <returns>A month punches object</returns>
        
        [HttpGet, Route("punches/thismonth")]
        public async System.Threading.Tasks.Task<IActionResult> GetThisMonth()
        {    
            var result = await _implementation.GetThisMonthAsync();
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Retrieves all punches of current user of current year</summary>
        /// <returns>A year punches object</returns>
        
        [HttpGet, Route("punches/thisyear")]
        public async System.Threading.Tasks.Task<IActionResult> GetThisYear()
        {    
            var result = await _implementation.GetThisYearAsync();
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Erzeugt einen Zeitstempel</summary>
        /// <returns>Liefert die Tagesstempel zurück</returns>
        
        [HttpPost, Route("punches/punch/In")]
        public async System.Threading.Tasks.Task<IActionResult> PunchIn()
        {    
            if(!ModelState.IsValid) return BadRequest(ModelState);
            var result = await _implementation.PunchInAsync();
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Erzeugt einen Zeitstempel</summary>
        /// <returns>Liefert die Tagesstempel zurück</returns>
        
        [HttpPost, Route("punches/punch/Out")]
        public async System.Threading.Tasks.Task<IActionResult> PunchOut()
        {    
            if(!ModelState.IsValid) return BadRequest(ModelState);
            var result = await _implementation.PunchOutAsync();
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Modifiziert einen Zeitstempel</summary>
        /// <returns>Unexpected error</returns>
        
        [HttpPost, Route("punchModify")]
        public async System.Threading.Tasks.Task<IActionResult> PunchModify([FromBody]ModifyPunchVm modifyPunchViewModel)
        {    
            if(!ModelState.IsValid) return BadRequest(ModelState);
            var result = await _implementation.PunchModifyAsync(modifyPunchViewModel);
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Modifiziert einen Zeitstempel</summary>
        /// <returns>Unexpected error</returns>
        
        [HttpPost, Route("punchModifyAdmin")]
        public async System.Threading.Tasks.Task<IActionResult> PunchModifyAdmin([FromBody]ModifyPunchAdminParams modifyPunchAdminParams)
        {    
            if(!ModelState.IsValid) return BadRequest(ModelState);
            var result = await _implementation.PunchModifyAdminAsync(modifyPunchAdminParams);
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
        /// <summary>Setzt den Status der Monatsabrechung</summary>
        /// <returns>Unexpected error</returns>
        
        [HttpPost, Route("punchSetStatusAdmin")]
        public async System.Threading.Tasks.Task<IActionResult> PunchSetStatusAdmin([FromBody]SetStatusAdminParams setStatusAdminParams)
        {    
            if(!ModelState.IsValid) return BadRequest(ModelState);
            var result = await _implementation.PunchSetStatusAdminAsync(setStatusAdminParams);
            foreach (var header in result.Headers)
                ControllerContext.HttpContext.Response.Headers.Add(header.Key, header.Value.ToArray());
            if (result.StatusCode == 200)
                return Ok(result.Result);
            else
                return new ObjectResult(result.Result) { StatusCode = result.StatusCode };
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class AuthResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
        private int? _validFor;
        private string _id;
        private string _token;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The token will be valid for validFor seconds</summary>
        [Newtonsoft.Json.JsonProperty("validFor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ValidFor
        {
            get { return _validFor; }
            set 
            {
                if (_validFor != value)
                {
                    _validFor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The user id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Ein Authentifizierungstoken mit dem alle folgenden Aufrufe authentifiziert werden.</summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token
        {
            get { return _token; }
            set 
            {
                if (_token != value)
                {
                    _token = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AuthResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AuthResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CredentialDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
        private string _password;
    
        /// <summary>Die E-Mail Adresse 1 .. 160 Zeichen. Wird benötigt für die Bestätigung der Kontoerstellung.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Das Passwort 1 .. 80 Zeichen. Wird für die Anmeldung benötigt.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CredentialDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CredentialDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class RegisterDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _firstname;
        private string _name;
        private string _email;
        private string _username;
        private string _password;
    
        /// <summary>Der Vorname, 1 .. 80 Zeichen</summary>
        [Newtonsoft.Json.JsonProperty("firstname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Firstname
        {
            get { return _firstname; }
            set 
            {
                if (_firstname != value)
                {
                    _firstname = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Der Name, 1 .. 80 Zeichen</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Die E-Mail Adresse 1 .. 160 Zeichen. Wird benötigt für die Bestätigung der Kontoerstellung.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Der Benutzername 1 .. 80 Zeichen. Wird für das Anmeldung benötigt.</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Das Passwort 1 .. 80 Zeichen. Wird für die Anmeldung benötigt.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RegisterDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RegisterDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class RegisterResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RegisterResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RegisterResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ConfirmResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConfirmResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfirmResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class RecoverPasswordParams : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
        private string _username;
    
        /// <summary>Die E-Mail Adresse 1 .. 160 Zeichen. Wird benötigt für die Bestätigung der Kontoerstellung.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Der Benutzername 1 .. 80 Zeichen. Wird für das Anmeldung benötigt.</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RecoverPasswordParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecoverPasswordParams>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class RecoverUsernameParams : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
    
        /// <summary>Die E-Mail Adresse 1 .. 160 Zeichen. Wird benötigt für die Bestätigung der Kontoerstellung.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RecoverUsernameParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecoverUsernameParams>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class RecoverPasswordResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RecoverPasswordResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecoverPasswordResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class RecoverUsernameResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RecoverUsernameResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecoverUsernameResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class SetPasswordParams : System.ComponentModel.INotifyPropertyChanged
    {
        private string _code;
        private string _username;
        private string _password;
    
        /// <summary>Der Passwortresetcode.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Der Benutzername 1 .. 80 Zeichen. Wird für das Anmeldung benötigt.</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Das Passwort 1 .. 80 Zeichen. Wird für die Anmeldung benötigt.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SetPasswordParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetPasswordParams>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class SetPasswordResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SetPasswordResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetPasswordResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class GetProfilesResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GetProfilesResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetProfilesResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class GetProfileResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GetProfileResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetProfileResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class PunchResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
        private DayPunchesDto _punches;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("punches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DayPunchesDto Punches
        {
            get { return _punches; }
            set 
            {
                if (_punches != value)
                {
                    _punches = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PunchResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PunchResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class DayResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
        private DayPunchesDto _punches;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("punches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DayPunchesDto Punches
        {
            get { return _punches; }
            set 
            {
                if (_punches != value)
                {
                    _punches = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DayResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DayResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class WeekResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
        private WeekPunchesDto _punches;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("punches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeekPunchesDto Punches
        {
            get { return _punches; }
            set 
            {
                if (_punches != value)
                {
                    _punches = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WeekResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeekResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class MonthResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
        private MonthPunchesDto _punches;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("punches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MonthPunchesDto Punches
        {
            get { return _punches; }
            set 
            {
                if (_punches != value)
                {
                    _punches = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MonthResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MonthResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class YearResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private OpResult _status;
        private YearPunchesDto _punches;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpResult Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("punches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public YearPunchesDto Punches
        {
            get { return _punches; }
            set 
            {
                if (_punches != value)
                {
                    _punches = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static YearResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<YearResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ModifyPunchVm : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _punchid;
        private double? _timedec;
        private bool? _direction;
    
        [Newtonsoft.Json.JsonProperty("punchid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Punchid
        {
            get { return _punchid; }
            set 
            {
                if (_punchid != value)
                {
                    _punchid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timedec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Timedec
        {
            get { return _timedec; }
            set 
            {
                if (_timedec != value)
                {
                    _timedec = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Direction
        {
            get { return _direction; }
            set 
            {
                if (_direction != value)
                {
                    _direction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModifyPunchVm FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModifyPunchVm>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ModifyPunchAdminParams : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _punchid;
        private string _userid;
        private double? _timedec;
        private bool? _direction;
    
        [Newtonsoft.Json.JsonProperty("punchid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Punchid
        {
            get { return _punchid; }
            set 
            {
                if (_punchid != value)
                {
                    _punchid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Userid
        {
            get { return _userid; }
            set 
            {
                if (_userid != value)
                {
                    _userid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timedec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Timedec
        {
            get { return _timedec; }
            set 
            {
                if (_timedec != value)
                {
                    _timedec = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Direction
        {
            get { return _direction; }
            set 
            {
                if (_direction != value)
                {
                    _direction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModifyPunchAdminParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModifyPunchAdminParams>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class SetStatusAdminParams : System.ComponentModel.INotifyPropertyChanged
    {
        private string _userid;
        private string _status;
    
        [Newtonsoft.Json.JsonProperty("userid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Userid
        {
            get { return _userid; }
            set 
            {
                if (_userid != value)
                {
                    _userid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SetStatusAdminParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetStatusAdminParams>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class YearPunchesDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _user;
        private int? _year;
        private System.Collections.Generic.List<MonthPunchesDto> _punches;
    
        /// <summary>Boid of user</summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The year expressed as 1 to 9999</summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year
        {
            get { return _year; }
            set 
            {
                if (_year != value)
                {
                    _year = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("punches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MonthPunchesDto> Punches
        {
            get { return _punches; }
            set 
            {
                if (_punches != value)
                {
                    _punches = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static YearPunchesDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<YearPunchesDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class MonthPunchesDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _user;
        private int? _month;
        private int? _year;
        private System.Collections.Generic.List<DayPunchesDto> _punches;
    
        /// <summary>Boid of user</summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The month expressed as value between 1 and 12</summary>
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Month
        {
            get { return _month; }
            set 
            {
                if (_month != value)
                {
                    _month = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The year expressed as 1 to 9999</summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year
        {
            get { return _year; }
            set 
            {
                if (_year != value)
                {
                    _year = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("punches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DayPunchesDto> Punches
        {
            get { return _punches; }
            set 
            {
                if (_punches != value)
                {
                    _punches = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MonthPunchesDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MonthPunchesDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class WeekPunchesDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _user;
        private int? _week;
        private int? _year;
        private System.Collections.Generic.List<DayPunchesDto> _dayPunches;
    
        /// <summary>Boid of user</summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The week expressed as 1 to 53</summary>
        [Newtonsoft.Json.JsonProperty("week", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Week
        {
            get { return _week; }
            set 
            {
                if (_week != value)
                {
                    _week = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The year expressed as 1 to 9999</summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year
        {
            get { return _year; }
            set 
            {
                if (_year != value)
                {
                    _year = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dayPunches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DayPunchesDto> DayPunches
        {
            get { return _dayPunches; }
            set 
            {
                if (_dayPunches != value)
                {
                    _dayPunches = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WeekPunchesDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeekPunchesDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class DayPunchesDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _userboid;
        private int? _day;
        private int? _month;
        private int? _year;
        private System.Collections.Generic.List<PunchDto> _punches;
        private double? _daytotal;
    
        /// <summary>Boid of user</summary>
        [Newtonsoft.Json.JsonProperty("userboid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Userboid
        {
            get { return _userboid; }
            set 
            {
                if (_userboid != value)
                {
                    _userboid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The day expressed as value betwenn 1 and 31</summary>
        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Day
        {
            get { return _day; }
            set 
            {
                if (_day != value)
                {
                    _day = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The month expressed as value between 1 and 12</summary>
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Month
        {
            get { return _month; }
            set 
            {
                if (_month != value)
                {
                    _month = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The year expressed as 1 to 9999</summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year
        {
            get { return _year; }
            set 
            {
                if (_year != value)
                {
                    _year = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("punches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PunchDto> Punches
        {
            get { return _punches; }
            set 
            {
                if (_punches != value)
                {
                    _punches = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("daytotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Daytotal
        {
            get { return _daytotal; }
            set 
            {
                if (_daytotal != value)
                {
                    _daytotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DayPunchesDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DayPunchesDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class PunchDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTime? _time;
        private double? _timedec;
        private bool? _direction;
        private System.DateTime? _created;
        private System.DateTime? _updated;
        private string _punchid;
    
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Time
        {
            get { return _time; }
            set 
            {
                if (_time != value)
                {
                    _time = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timedec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Timedec
        {
            get { return _timedec; }
            set 
            {
                if (_timedec != value)
                {
                    _timedec = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>True means enter work, False means leave work.</summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Direction
        {
            get { return _direction; }
            set 
            {
                if (_direction != value)
                {
                    _direction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The timestamp of the creation of this value.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The timestamp of the last update of this value.</summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Updated
        {
            get { return _updated; }
            set 
            {
                if (_updated != value)
                {
                    _updated = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("punchid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Punchid
        {
            get { return _punchid; }
            set 
            {
                if (_punchid != value)
                {
                    _punchid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PunchDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PunchDto>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class OpResult : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _success;
        private object _result;
    
        /// <summary>True wenn die Operation erfolgreich war</summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success
        {
            get { return _success; }
            set 
            {
                if (_success != value)
                {
                    _success = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Eine Text-Meldung</summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Result
        {
            get { return _result; }
            set 
            {
                if (_result != value)
                {
                    _result = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OpResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OpResult>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

}